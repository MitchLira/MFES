class TestEventClass is subclass of MyTestCase
instance variables
	--Events
	ev1: Event := new Event("Workshop Liner", mk_Platform`Date(2018, 1,12), "Porto", "MakeUp", 10, 15);
--	ev2: Event := new Event("Coleção de Inverno", mk_Plataform`Date(2018, 2,22), "Amarante", "Winter", 15, 20);
--	ev3: Event := new Event("Coleção de VerÃ£o", mk_Plataform`Date(2018, 5,30), "Lisboa", "Summer", 30, 5);
	
	--Designers
	d1: Designer := new Designer("Oscar de La Renta");
	d2: Designer := new Designer("Donna Karen");
	
	--Users
	u1: User := new User("pBabo", "Paulo Babo");
	u2: User := new User("mitchlira", "Miguel Lira");
operations
	--Test oerations with Users
	public testUsers: () ==> ()
	testUsers() == (
		IO`println("\t (1) Registar um User num Evento");
		u1.setBudget(100);
		ev1.registerUser(u1);
		assertEqual(1, card ev1.audience);
		IO`println("\t (2) Verificação do Budget de um User após Registo num Evento");
		assertEqual(90, u1.budget);
		IO`println("\t (3) Remoção de um User de um Evento");
		ev1.refundUser(u1);
		assertEqual(0, card ev1.audience);
		IO`println("\t (4) Verificação da reposição do Budget do User removido do Evento");
		assertEqual(100, u1.budget);
		
		IO`println("\t (5) Adicionar Designers ao Evento");
		ev1.registerUser(u1);
		u2.setBudget(222);
		ev1.registerUser(u2);
		assertEqual(2, card ev1.audience);
		ev1.addDesigner(d1);
		ev1.addDesigner(d2);
		assertEqual(2, card ev1.designers);
		IO`println("\t (6) Remoção de um Designer a um Evento");
		ev1.removeDesigner(d1);
		assertEqual(1, card ev1.designers);
		for all designer in set ev1.designers do(
			assertEqual("Donna Karen", designer.name);
		);
	);
	
	public testAll: () ==> ()
  testAll() == (
  IO`println("Testes da classe Event:");
		testUsers();
  );
end TestEventClass