class Runway is subclass of Event
types
-- TODO Define types here
values
-- TODO Define values here
instance variables
	public expositionItems: map Designer to set of Item;
 	public models: map Designer to set of Model; 
operations
	public Runway: Plataform`String * Plataform`Date * Plataform`String *  Plataform`String * Plataform`Price * int ==>Runway
	Runway(n,d, p, t, pr,  maxS)==
	(
		expositionItems := {|->};
		models := {|->};
		Event(n,d, p, t, pr,  maxS);
	);
	
	public getModelsOfDesignerInShow: Designer ==> set of Model
	getModelsOfDesignerInShow(designer) ==
	(
		return models(designer);
	)
	pre designer in set dom models;
	
	public getItemsOfDesignerInShow: Designer ==> set of Item
	getItemsOfDesignerInShow(designer) ==
	(
		return expositionItems(designer);
	)
	pre designer in set dom expositionItems;
-------------------------------------------------------------
	public addDesigner: Designer ==> ()
	addDesigner(designer)==
	(
		designers := designers union {designer};
		expositionItems(designer):= {};
		models(designer):= {};
	)
	pre (designer not in set designers) and
			(designer not in set dom expositionItems) and
			(designer not in set dom models)
	
	post (designer  in set designers) and
			 (designer  in set dom expositionItems) and
			 (designer  in set dom models); 
	
	public removeDesigner: Designer ==> ()
	removeDesigner(designer)==
	(
		designers:= designers \ {designer};
		expositionItems:= (dom expositionItems \ {designer})<: expositionItems;
		models:= (dom models \ {designer})<: models;
	)
	pre (designer  in set designers) and
			(designer  in set dom expositionItems) and
			(designer  in set dom models)	 
	post (designer not in set designers) and
			 (designer not in set dom expositionItems) and
			 (designer not in set dom models);
-------------------------------------------------------------			 
	public addDesignerItem: Designer * Item ==> ()
	addDesignerItem(designer,item)==
	(
		 expositionItems(designer):= expositionItems(designer) union {item};
	)
	pre (designer in set designers) and
			(designer in set dom expositionItems) and 
			(item in set designer.items) and
			(item not in set expositionItems(designer))
	post item in set expositionItems(designer);
	
	public removeDesignerItem: Designer * Item ==> ()
	removeDesignerItem(designer,item)==
	(
		expositionItems(designer):= expositionItems(designer) \ {item};
	)
	pre (designer in set designers) and
			(designer in set dom expositionItems) and
			(item in set designer.items) and
			(item in set expositionItems(designer))
	post item not in set expositionItems(designer);
	
	--public addItemByRef: Item`Ref ==> ()
	--addItemByRef(ref) ==
	--(
	--	for all designer in set designers do
	--	(
	--		for all item in set designer.items do
	--		(
	--			if item.reference = ref 
	--			then addDesignerItem(designer,item);
	--		)
	--	)
	--);
------------------------------------------------------------
	
	public addDesignerModel: Designer * Model ==> ()
	addDesignerModel(designer, model)==
	(
		models(designer):= models(designer) union {model};
	)
	pre (designer in set designers) and
			(designer in set dom models) and
			(model in set designer.models) and
			(model not in set models(designer))
	post model in set models(designer);
	
	
	public removeDesignerModel: Designer * Model ==> ()
	removeDesignerModel(designer, model)==
	(
		models(designer):= models(designer) \ {model};
	)
	pre (designer in set designers) and
			(designer in set dom models) and
			(model in set designer.models) and
			(model in set models(designer))
	post model not in set models(designer);
	
functions
-- TODO Define functiones here
traces
-- TODO Define Combinatorial Test Traces here
end Runway