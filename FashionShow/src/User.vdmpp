class User
	types
		public Budget = real
			inv r == r >= 0.0;
		public Username = FashionShow`String;
		
	values
	-- TODO Define values here
	instance variables
		public username: Username;
		public name: FashionShow`String;
		public budget: Budget;
		public boughtItems: set of Item;
	operations
		public User: Username * FashionShow`String ==> User 
		User(u,n) == 
		(
			username := u;
			name := n;
			budget := 0.0;
			boughtItems:= {};
			return self;
		);
		
		public getUsername: () ==> FashionShow`String
			getUsername() == return username;
		public setUsername: (FashionShow`String) ==> ()
			setUsername(usrnm) == username := usrnm;
		
		public getName: () ==> FashionShow`String
			getName() == return name;
		public setName: (FashionShow`String) ==> ()
			setName(nm) == name := nm;
			
		public getBudget: () ==> Budget
			getBudget() == return budget;
		public setBudget: (Budget) ==> ()
			setBudget(bd) == budget := bd;
			
		public getBoughtItems: () ==> set of Item
			getBoughtItems() == return boughtItems;
		public setBoughtItems: (Item) ==> ()
			setBoughtItems(item) == boughtItems := boughtItems union {item};
		
	functions
	-- TODO Define functiones here
	traces
	-- TODO Define Combinatorial Test Traces here
end User