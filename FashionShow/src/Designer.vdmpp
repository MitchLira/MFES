class Designer
types

instance variables
		public name: Plataform`String;
		public models: set of Model;
		public items: set of Item;
values
	
operations
	public Designer: Plataform`String ==> Designer 
		Designer(n) == (
			name := n;
			models := {};
			items := {};
			return self;
	);
	
	public setModels: set of Model ==> ()
			setModels(model) == 
				models := model;
	
	public setItems: set of Item ==> ()
			setItems(item) == 
				items := item;
	
	public addModel: Model ==> ()
		addModel(model) == (
	 			models := models union {model}
		)
	pre model not in set models;
	 
	public addModels: set of Model ==> ()
		addModels(newModels) == (
	  	for all m in set newModels do (
	 				models := models union {m};
			)
	 	)
	pre not newModels subset models;
	 	 
	public remModel: Model ==> ()
		remModel(model) == (
	  		models := models \ {model}
	 	)
	pre models <> {} and model in set models;
	 
	public remModels: set of Model ==> ()
		remModels(oldModels) == (
	  	for all model in set oldModels do (
	  			models := models \ {model};
	  	)
		)
	pre models <> {} and oldModels subset models;
	  	
	public addItem: Item ==> ()
		addItem(item) == (
	  		items := items union {item}
		)
	pre item not in set items;
	 
	public addItems: set of Item ==> ()
		addItems(newItems) == (
	 		for all i in set newItems do (
	 				items := items union {i};
	 		)
	 	)
	pre (not newItems subset items) and newItems <> items;
 		
	public remItem: Item ==> ()
		remItem(item) ==
	   		items := items \ {item}
	pre items <> {} and item in set items;
	 
	public remItems: set of Item ==> ()
		remItems(oldItems) ==
	 		for all i in set oldItems do (
	 				items := items \ {i}
	 		)
	pre items <> {} and (oldItems subset items);
	 
functions

end Designer

